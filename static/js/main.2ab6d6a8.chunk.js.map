{"version":3,"sources":["components/SampleComponent/SampleComponent.js","hoc/withProgressReadingBar/withProgressReadingBar.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["withProgressReadingBar","Component","props","handleScrollBarWidth","event","currentWidth","target","scrollTop","scrollTopMax","setState","progressBarWidth","state","className","onScroll","this","style","width","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAqBeA,G,MCZgB,SAACC,GAE5B,yDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,qBAAuB,SAACC,GACpB,IAGMC,EAHYD,EAAME,OAAOC,UACVH,EAAME,OAAOE,aAEgB,IAClD,EAAKC,SAAS,CAACC,iBAAiB,GAAD,OAAKL,EAAL,QAV/B,EAAKM,MAAQ,CACTD,iBAAkB,KAJP,EADvB,qDAkBQ,OACI,yBAAKE,UAAU,mBAAmBC,SAAUC,KAAKX,sBAC7C,yBAAKS,UAAU,eAAeG,MAAO,CAACC,MAAOF,KAAKH,MAAMD,oBACxD,kBAACT,EAAca,KAAKZ,YArBpC,GAAqBe,IAAMhB,WDUhBD,EAjBS,SAACE,GACrB,OACI,yBAAKU,UAAU,UACX,ktEEKGM,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2ab6d6a8.chunk.js","sourcesContent":["import React from 'react';\nimport './SampleComponent.css';\nimport withProgressReadingBar from '../../hoc/withProgressReadingBar/withProgressReadingBar';\n\nconst SampleComponent = (props) => {\n    return (\n        <div className=\"sample\">\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Laboriosam unde voluptates ipsum ullam. Quia consectetur ab ratione labore necessitatibus facere animi illo! Hic reprehenderit ipsam veritatis dicta fuga odio qui?\n            Libero excepturi odit tempore quo dolorum distinctio nemo sapiente. Nulla molestiae aliquid iure officiis tenetur sunt ea! Eos id harum, voluptatem nulla voluptatum facilis dolorem culpa atque explicabo illum dolores.\n            Veniam sapiente dicta ipsam distinctio voluptas officiis nisi, eligendi similique magnam quo odit quibusdam totam eveniet quasi nostrum perspiciatis rerum consequuntur nam inventore amet maiores perferendis adipisci iure? Quibusdam, atque?\n            Atque impedit, magni consequuntur enim incidunt debitis quod, est, obcaecati quasi tempora aperiam cupiditate sequi natus! Et beatae ex, similique debitis at, necessitatibus qui placeat delectus autem mollitia, impedit ipsam?\n            Excepturi saepe blanditiis at qui quibusdam, sit, inventore nesciunt, iste alias quia veniam. Quas consequuntur animi eveniet culpa eum provident temporibus adipisci nisi officiis, est esse, doloribus numquam expedita necessitatibus?\n            Amet voluptas fugiat a rerum, ad voluptatem iusto modi fugit corporis repellendus delectus unde odit quae accusantium eos autem dolor? Saepe molestias ipsam eos deserunt obcaecati at veniam nisi culpa.\n            Doloribus, tempora dicta vel voluptatibus odio, consectetur commodi corporis esse vitae dolore dolorum ex unde modi, labore eos nobis totam. Nobis doloremque temporibus magnam nemo aut dolore sequi voluptas eligendi.\n            Itaque animi, praesentium, sunt error sequi asperiores voluptatibus distinctio cupiditate nihil ea sed eaque alias pariatur facere quidem neque aspernatur blanditiis fuga sint, consectetur hic et. Tempore est libero qui.\n            Enim, impedit, similique earum hic nemo saepe pariatur placeat ex architecto nihil quidem culpa in quas aut voluptate id? At ex tenetur odio aperiam vitae necessitatibus tempore reprehenderit rerum dolor.\n            Fugit cupiditate ullam facilis laboriosam molestias aut vitae rem voluptatem, laborum, praesentium adipisci, temporibus inventore nemo maiores doloribus recusandae eaque libero esse laudantium et omnis tempore! Nisi porro nihil obcaecati!</p>\n        </div>\n    );\n}\n\nexport default withProgressReadingBar(SampleComponent);","// Przygotuj HOCa withProgressReadingBar, który:\n// - tworzy nad komponentem, który przyjmuje progress bar, który jest niebieski o wysokości 5px\n// - progress bar odzwierciedla swoją długością wysokość przeskrolowanego elementu child\n// - progress bar powienien być sticky do górnej krawędzi ekranu w obrębie elementu child\n// - owrapowany komponent powinien mieć maksymalnie wysokość 50% wysokości ekranu\n\nimport React from 'react';\nimport './withProgressReadingBar.css';\n\nconst withProgressReadingBar = (Component) => {\n\n    return class extends React.Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                progressBarWidth: '0'\n            }\n        }\n\n        handleScrollBarWidth = (event) => {\n            const scrollTop = event.target.scrollTop;\n            const scrollTopMax = event.target.scrollTopMax;\n\n            const currentWidth = (scrollTop / scrollTopMax) * 100;\n            this.setState({progressBarWidth: `${currentWidth}%`});\n        }\n\n        render() {\n            return (\n                <div className=\"progress-wrapper\" onScroll={this.handleScrollBarWidth}>\n                    <div className=\"progress-bar\" style={{width: this.state.progressBarWidth}}></div>\n                    <Component {...this.props} />\n                </div>\n            );\n        }\n    }   \n}\n\nexport default withProgressReadingBar;","import React from 'react';\nimport './App.css';\nimport SampleComponent from '../../components/SampleComponent/SampleComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SampleComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}